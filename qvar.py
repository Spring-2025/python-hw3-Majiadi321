# -*- coding: utf-8 -*-
"""qVaR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15OuLqRL3MMNra80qJh2PgYtwbWvMQTkM
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

def VaR(r, confidence, principal=1):

    alpha = 1 - confidence  # Tail probability
    var_percentile = np.percentile(r, alpha * 100)  # Percentile calculation
    out = principal * abs(var_percentile)  # Convert to monetary value

    # Plot histogram
    plt.hist(r, bins=50, alpha=0.75, color='blue', edgecolor='black')
    plt.axvline(var_percentile, color='red', linestyle='dashed', linewidth=2, label=f'VaR at {confidence*100:.1f}%')
    plt.legend()
    plt.title("Distribution of Returns with VaR")
    plt.xlabel("Returns")
    plt.ylabel("Frequency")
    plt.show()

    return out

def percent_var(r, confidence):


    alpha = 1 - confidence  # Tail probability

    # Plot histogram
    plt.hist(r, bins=50, alpha=0.75, color='green', edgecolor='black')
    plt.title("Distribution of Returns")
    plt.xlabel("Returns")
    plt.ylabel("Frequency")
    plt.show()

    return abs(np.percentile(r, alpha * 100))  # Calculate and return the percentile

# Example: Simulating returns
test_returns = np.random.normal(0, 1, 10000)
print("97.72th percentile:", np.percentile(test_returns, 97.72))

# Unit test
r = np.random.normal(0.05, 0.03, 1000000)  # Simulated returns
two_sd_prob = norm.cdf(2)  # Probability under normal curve within 2 standard deviations

confidence_level = two_sd_prob
my_percent_var = percent_var(r, confidence_level)
print("VaR Test Result:", np.round(my_percent_var, 2) == 0.01)